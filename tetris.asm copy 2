#####################################################################
# CSCB58 Summer 2024 Assembly Final Project - UTSC
# Student1: Name, Student Number, UTorID, official email
# Student2: Name, Student Number, UTorID, official email
#
# Bitmap Display Configuration:
# - Unit width in pixels: 8 (update this as needed) 
# - Unit height in pixels: 8 (update this as needed)
# - Display width in pixels: 256 (update this as needed)
# - Display height in pixels: 256 (update this as needed)
# - Base Address for Display: 0x10008000 ($gp)
#
# Which milestones have been reached in this submission?
# (See the assignment handout for descriptions of the milestones)
# - Milestone 1/2/3/4/5 (choose the one the applies)
#
# Which approved features have been implemented?
# (See the assignment handout for the list of features)
# Easy Features:
# 1. (fill in the feature, if any)
# 2. (fill in the feature, if any)
# ... (add more if necessary)
# Hard Features:
# 1. (fill in the feature, if any)
# 2. (fill in the feature, if any)
# ... (add more if necessary)
# How to play:
# (Include any instructions)
# Link to video demonstration for final submission:
# - (insert YouTube / MyMedia / other URL here). Make sure we can view it!
#
# Are you OK with us sharing the video with people outside course staff?
# - yes / no
#
# Any additional information that the TA needs to know:
# - (write here, if any)
#
#####################################################################

##############################################################################


##############################################################################
#Aaron
.data
numbers: .word 0, 0, 0, 0    # Create an array with 4 numbers
message: .asciiz "Sorted Array: "   # Message to be printed

.text
main:
    la $s7, numbers                # Load address of numbers into $s7
    li $t0, 1
    li $t1, 2
    li $t2, 5
    li $t3, 4
    sw $t0, 0($s7)
    sw $t1, 4($s7)
    sw $t2, 8($s7)
    sw $t3, 12($s7) 

    li $s0, 0                      # Initialize counter 1 for outer loop
    li $s6, 3                      # n - 1, where n = number of elements - 1

    # Print out message
    li $v0, 4
    la $a0, message
    syscall

sort_loop:
    li $s1, 0                      # Reset inner loop counter

inner_loop:
    sll $t7, $s1, 2                # Multiply $s1 by 4 (word size)
    add $t7, $s7, $t7              # Address of numbers[s1]
    
    lw $t0, 0($t7)                 # Load numbers[s1] into $t0
    lw $t1, 4($t7)                 # Load numbers[s1 + 1] into $t1

    sgt $t2, $t1, $t0              # If $t1 > $t0 (next element > current element)
    beq $t2, $zero, no_swap        # If $t2 == 0, no swap needed

    # Swap elements
    sw $t1, 0($t7)                 # Store numbers[s1 + 1] in numbers[s1]
    sw $t0, 4($t7)                 # Store numbers[s1] in numbers[s1 + 1]

no_swap:
    addi $s1, $s1, 1               # Increment inner loop counter
    sub $s5, $s6, $s0              # Calculate remaining iterations
    bne $s1, $s5, inner_loop       # If $s1 != $s5, continue inner loop

    addi $s0, $s0, 1               # Increment outer loop counter
    li $s1, 0                      # Reset inner loop counter
    bne $s0, $s6, sort_loop        # If $s0 != $s6, continue outer loop

print_loop:
    li $s0, 0                      # Reset counter for printing
    la $s7, numbers                # Reload base address of numbers

print_element:
    beq $s0, 4, final             # If $s0 == 4 (number of elements), go to final

    lw $t5, 0($s7)                 # Load value from numbers into $t5

    li $v0, 1                      # Set syscall code for print integer
    move $a0, $t5
    syscall                        # Print the integer

    li $a0, 32                     # Print space
    li $v0, 11
    syscall

    addi $s7, $s7, 4               # Increment through the numbers
    addi $s0, $s0, 1               # Increment counter
    j print_element                # Repeat print loop
    

final:
    jal remove_duplicate
    
    li $v0, 4
    la $a0, message
    syscall
    
    lw $a0, 0($sp)
    li $v0, 1
    syscall
    
    lw $a0, 4($sp)
    li $v0, 1
    syscall
    
    lw $a0, 8($sp)
    li $v0, 1
    syscall
    
    lw $a0, 12($sp)
    li $v0, 1
    syscall
    
    li $v0, 10                     # Load the exit system call code into $v0
    syscall                        # Make the syscall to exit the program
    
remove_duplicate:
    li $t2, 0
    la $s7, numbers
    addi $t6, $s7, 12
    addi $t5, $s7, 8
    lw $v1, 0($s7)
    
    move $a0, $v1
    li $v0, 1
    syscall
    
check_loop:
    lw $s6, 0($t6)
    
    
    lw $s5, 0($t5)
    
    beq $s6, $v1, finish_loop    
    beq $s6, $s5, update
    subi $sp, $sp, 4
    sw $s6, 0($sp)
    addi $t2, $t2, 1
    
 update:
   mul $t3, $t2, -4
   addi $t3, $t3, 12
   add $t6, $s7, $t3
   subi $t3, $t3, 4
   add $t5, $s7, $t3 
   j check_loop   
   
 finish_loop:
    beq $s6, $s5, update_done
    subi $sp, $sp, 4
    sw $s6, 0($sp)
    addi $t2, $t2, 1
    j exit_duplicate_loop
    
 update_done:
    subi $sp, $sp, 8
    sw $s6, 4($sp)
    sw $s5, 0($sp)
    addi $t2, $t2, 2 
    j exit_duplicate_loop
    
exit_duplicate_loop: 
    jr $ra 


