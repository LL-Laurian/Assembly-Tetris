#####################################################################
# CSCB58 Summer 2024 Assembly Final Project - UTSC
# Student1: Name, Student Number, UTorID, official email
# Student2: Name, Student Number, UTorID, official email
#
# Bitmap Display Configuration:
# - Unit width in pixels: 8 (update this as needed) 
# - Unit height in pixels: 8 (update this as needed)
# - Display width in pixels: 256 (update this as needed)
# - Display height in pixels: 256 (update this as needed)
# - Base Address for Display: 0x10008000 ($gp)
#
# Which milestones have been reached in this submission?
# (See the assignment handout for descriptions of the milestones)
# - Milestone 1/2/3/4/5 (choose the one the applies)
#
# Which approved features have been implemented?
# (See the assignment handout for the list of features)
# Easy Features:
# 1. (fill in the feature, if any)
# 2. (fill in the feature, if any)
# ... (add more if necessary)
# Hard Features:
# 1. (fill in the feature, if any)
# 2. (fill in the feature, if any)
# ... (add more if necessary)
# How to play:
# (Include any instructions)
# Link to video demonstration for final submission:
# - (insert YouTube / MyMedia / other URL here). Make sure we can view it!
#
# Are you OK with us sharing the video with people outside course staff?
# - yes / no
#
# Any additional information that the TA needs to know:
# - (write here, if any)
#
#####################################################################

##############################################################################

    .data
##############################################################################
.data
    str_a: .asciiz "Value a: "
    str_b: .asciiz "Value b: "
    str_c: .asciiz "Value c: "
    str_d: .asciiz "Value d: "
    str_e: .asciiz "Value e: "
    newline: .asciiz "\n "
.text
.globl main

main:
    # Initialize values
    li $s0, 0           # a
    li $s1, 1           # b
    li $s2, 2           # c
    li $s3, 3           # d
    li $s4, 4           # e
    
    # Allocate stack space and store values
    subi $sp, $sp, 16   # Allocate 20 bytes on the stack (16 for a, b, c, d and 4 for e)
    sw $s0, 0($sp)      # Store value 'a' at 0($sp)
    sw $s1, 4($sp)      # Store value 'b' at 4($sp)
    sw $s2, 8($sp)      # Store value 'c' at 8($sp)
    sw $s3, 12($sp)     # Store value 'd' at 12($sp)
    
    subi $sp, $sp, 4 
    sw $s4, 16($sp)     # Store value 'e' at 16($sp)

    # Reload and print integer values with strings
    lw $t0, 0($sp)      # Load value 'a' into $t0
    la $a0, str_a       # Load address of "Value a: " into $a0
    li $v0, 4           # Print string syscall
    syscall             # Print string
    li $v0, 1           # Print integer syscall
    move $a0, $t0       # Move value to $a0
    syscall             # Print value
    li $v0, 4           # Print newline
    la $a0, newline
    syscall

    lw $t1, 4($sp)      # Load value 'b' into $t1
    la $a0, str_b       # Load address of "Value b: " into $a0
    li $v0, 4           # Print string syscall
    syscall             # Print string
    li $v0, 1           # Print integer syscall
    move $a0, $t1       # Move value to $a0
    syscall             # Print value
    li $v0, 4           # Print newline
    la $a0, newline
    syscall

    lw $t2, 8($sp)      # Load value 'c' into $t2
    la $a0, str_c       # Load address of "Value c: " into $a0
    li $v0, 4           # Print string syscall
    syscall             # Print string
    li $v0, 1           # Print integer syscall
    move $a0, $t2       # Move value to $a0
    syscall             # Print value
    li $v0, 4           # Print newline
    la $a0, newline
    syscall

    lw $t3, 12($sp)     # Load value 'd' into $t3
    la $a0, str_d       # Load address of "Value d: " into $a0
    li $v0, 4           # Print string syscall
    syscall             # Print string
    li $v0, 1           # Print integer syscall
    move $a0, $t3       # Move value to $a0
    syscall             # Print value
    li $v0, 4           # Print newline
    la $a0, newline
    syscall

    lw $t4, 16($sp)     # Load value 'e' into $t4
    la $a0, str_e       # Load address of "Value e: " into $a0
    li $v0, 4           # Print string syscall
    syscall             # Print string
    li $v0, 1           # Print integer syscall
    move $a0, $t4       # Move value to $a0
    syscall             # Print value
    li $v0, 4           # Print newline
    la $a0, newline
    syscall

    # Free the stack space and exit
    addi $sp, $sp, 20   # Free the allocated 20 bytes
    li $v0, 10          # Exit syscall
    syscall

